<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>相等操作符中的隐式转换</title>
      <link href="2020/10/27/%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2020/10/27/%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>看到公众号推文 ![ ]==[ ] 值是什么，原以为取反的式子肯定是 false，但这个比较的确让我心头一惊 Σ(っ °Д °;)っ<br>那今天就具体看看隐式转换是怎么进行的吧</p></blockquote><h1 id="一、可能会被忽略的细节"><a href="#一、可能会被忽略的细节" class="headerlink" title="一、可能会被忽略的细节"></a>一、可能会被忽略的细节</h1><p>同类型的比较就不用说了，一般会被大家忽略的都是不同类型比较的时候所出现的类型隐式转换的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="string">&quot;1&quot;</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span>; <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>上面的都比较好理解，但是，回归题目，可以使<code>a==a &amp;&amp; a==!a</code>这个表达式为 true 的 a 是什么呢？</p><p>来看一个让人惊讶的比较式子吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [];</span><br><span class="line">a == !a; <span class="comment">//true</span></span><br><span class="line">a == a; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>好了，关于题目的答案已经找到了，但为什么会是这个样子呢，就需要细究比较操作符中的隐式转换了</p><h1 id="二、比较运算涉及类型转换时的规则"><a href="#二、比较运算涉及类型转换时的规则" class="headerlink" title="二、比较运算涉及类型转换时的规则"></a>二、比较运算涉及类型转换时的规则</h1><p>对于如何进行比较，MDN 上是这么说的：</p><h2 id="类型转换规则"><a href="#类型转换规则" class="headerlink" title="类型转换规则"></a>类型转换规则</h2><p><img src="https://img-blog.csdnimg.cn/20201023163205983.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>当比较运算涉及类型转换时，JavaScript 会按以下规则对字符串、数字、布尔或者对象类型的操作数进行操作:</p><ol><li>当比较数字和字符串时，字符串会转换成数字值。JavaScript 尝试将数字字面量转换为数字类型的值。</li><li>当其中有一个操作数为布尔值时，如果布尔值为 true，为转换为 1，如果为 false 会转换为 0</li><li>如果一个对象与数字或者字符串比较，JavaScript 会尝试返回对象的默认值，操作符会尝试通过方法<strong>valueOf</strong>和<strong>toString</strong>将对象转换为其原始值（一个字符串或者数字类型的值）。如果尝试转换失败，会产生一个错误。<br><strong>注意:</strong> 当且仅当与原始值进行比较时，对象会被转换为原始值。当两个操作数均为对象时，他们会作为对象进行比较，仅当他们的引用相同对象时返回 true。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20201026114528372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvb2RfbW9yaW5nXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>先来解释一下这个式子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] == ![]; <span class="comment">//true</span></span><br><span class="line"><span class="comment">//这里 ![] 作为布尔值false会转换成 0，</span></span><br><span class="line"><span class="comment">// [] 也将转换成数值字面量为 0</span></span><br><span class="line"><span class="comment">// 上面式子就相当于 Number([]) == Number(Boolean(![]))</span></span><br></pre></td></tr></table></figure><h2 id="对象转换成原始类型时-valueOf-与-toString-的优先级"><a href="#对象转换成原始类型时-valueOf-与-toString-的优先级" class="headerlink" title="对象转换成原始类型时 valueOf 与 toString 的优先级"></a>对象转换成原始类型时 valueOf 与 toString 的优先级</h2><p>上述类型转换规则 3 有提到，当对象与字符串或者数字进行比较时，JavaScript 会尝试返回对象默认值，调用其 valueOf 和 toString 将对象转换为其原始值，那到底调用哪个呢，让我们来一探究竟：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">    valueOf: <span class="function">() =&gt;</span> <span class="number">1</span>,</span><br><span class="line">    toString: <span class="function">() =&gt;</span> <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  c = &#123;</span><br><span class="line">    valueOf: <span class="function">() =&gt;</span> <span class="literal">null</span>,</span><br><span class="line">    toString: <span class="function">() =&gt;</span> <span class="string">&quot;null&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  d = &#123;</span><br><span class="line">    valueOf: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">    toString: <span class="function">() =&gt;</span> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  e = &#123;</span><br><span class="line">    valueOf: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">    toString: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b == <span class="number">1</span>, b == <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c == <span class="literal">null</span>, c == <span class="string">&quot;null&quot;</span>, c == <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d == <span class="literal">undefined</span>, d == <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(e == <span class="literal">undefined</span>, e == <span class="literal">null</span>, e == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true false</span></span><br><span class="line"><span class="comment">// false false true</span></span><br><span class="line"><span class="comment">// false true</span></span><br><span class="line"><span class="comment">// Uncaught TypeError: Cannot convert object to primitive value</span></span><br></pre></td></tr></table></figure><p>实践出真知，由上面例子我们可以看出：</p><blockquote><p>1.valueOf 的优先级高于 toString<br>2.valueOf 和 toString 返回 null 和 undefined 时返回 false<br>3.valueOf 和 toString 返回的不是原始值时会报错</p></blockquote><h1 id="三、ES6-中的-Symbol-toPrimitive（优先级最高）"><a href="#三、ES6-中的-Symbol-toPrimitive（优先级最高）" class="headerlink" title="三、ES6 中的 Symbol.toPrimitive（优先级最高）"></a>三、ES6 中的 Symbol.toPrimitive（优先级最高）</h1><p>ES6 中的 symbol.toPrimitive 这个转换函数优先级高于 valueOf 和 toString;<br><strong>symbol.toPrimitive</strong>是一个内置的 symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为一个对应的原始值时会调用此函数。<br>该函数被调用的时候，会传递一个参数 hint,表示预期的原始型，这个参数取值可为：number、string、default 中的一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive]: <span class="function">(<span class="params">hint</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">&quot;number&quot;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(obj) == <span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(obj) == <span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj == <span class="number">3</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="四、扩展-1：如何让-a-1-amp-amp-a-2-amp-a-3成立"><a href="#四、扩展-1：如何让-a-1-amp-amp-a-2-amp-a-3成立" class="headerlink" title="四、扩展 1：如何让 a==1&amp;&amp;a==2&amp;a==3成立"></a>四、扩展 1：如何让 <code>a==1&amp;&amp;a==2&amp;a==3</code>成立</h1><p>了解了上述方法之后，那就可以重写对象的 valueOf 或者 toString 方法来实现了，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  value: <span class="number">0</span>,</span><br><span class="line">  valueOf: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ++a.value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="五、扩展-2：如何让-a-1-amp-amp-a-2-amp-a-3成立"><a href="#五、扩展-2：如何让-a-1-amp-amp-a-2-amp-a-3成立" class="headerlink" title="五、扩展 2：如何让 a===1&amp;&amp;a===2&amp;a===3成立"></a>五、扩展 2：如何让 <code>a===1&amp;&amp;a===2&amp;a===3</code>成立</h1><h2 id="劫持"><a href="#劫持" class="headerlink" title="劫持"></a>劫持</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  value: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    <span class="keyword">return</span> ++obj.value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">obj.a === <span class="number">1</span> &amp;&amp; obj.a === <span class="number">2</span> &amp;&amp; obj.a === <span class="number">3</span>;</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="ES6-proxy-代理"><a href="#ES6-proxy-代理" class="headerlink" title="ES6 proxy 代理"></a>ES6 proxy 代理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    get(target, key, receiver) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">this</span>.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">obj.a === <span class="number">1</span> &amp;&amp; obj.a === <span class="number">2</span> &amp;&amp; obj.a === <span class="number">3</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + butterfly + github 搭建个人博客</title>
      <link href="2020/09/02/hexo+github+butterfly%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/09/02/hexo+github+butterfly%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).## Quick Start### Create a new post<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a> –&gt;</p><blockquote><p>hexo + github + butterfly 搭建个人博客</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
