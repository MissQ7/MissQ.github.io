<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typescript 学习笔记</title>
      <link href="2020/10/30/typescript%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/30/typescript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="一、typescript-是什么"><a href="#一、typescript-是什么" class="headerlink" title="一、typescript 是什么"></a>一、typescript 是什么</h1><blockquote><p>TypeScript is a typed superset of javascript that compiles to plain javascript ————来自官网</p></blockquote><p>也就是说：typescript 是 JavaScript 的超集，包含了 js 基础特性，还包含了自有的独特语法，不能直接运行，需要编译成 js 后才可以运行。</p><p><strong>TypeScript 优势：</strong></p><ol><li>有更好的错误提示</li><li>可读性更好</li><li>编写提示友好</li></ol><blockquote><p>虽然从代码执行逻辑上来说 typescript 并没有起到什么作用，但对于团队合作，代码的可读性上去了也就意味这可维护可迭代了，这方面投入的精力成本会大大降低，所以说 typescript 还是大有用途的。</p></blockquote><p>JavaScript 的类型是动态类型</p><p>typescript 有自己的类型</p><h1 id="二、TypeScript-环境配置"><a href="#二、TypeScript-环境配置" class="headerlink" title="二、TypeScript 环境配置"></a>二、TypeScript 环境配置</h1><p>题外话：vscode 和 TypeScript 都是微软家的，所以编辑器就用 vscode 了，提示什么的都比较友好~</p><p>接下来就是全局安装 TypeScript</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>方法 1. 使用：通过指令 tsc 将 ts 文件编译成 js 文件，在执行 js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts</span><br><span class="line">node xxx.js</span><br></pre></td></tr></table></figure><p>方法 2. 安装 ts-node,直接通过指令 ts 来完成编译与执行的步骤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ts-node</span><br><span class="line">ts xxx.ts</span><br></pre></td></tr></table></figure><p>生成一个 ts 项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts --init</span><br></pre></td></tr></table></figure><h1 id="三、基础类型及类型注解和类型推论"><a href="#三、基础类型及类型注解和类型推论" class="headerlink" title="三、基础类型及类型注解和类型推论"></a>三、基础类型及类型注解和类型推论</h1><p>静态类型是指在定义的时候都已经确定了类型，意味着它的属性与方法基本也是确定的了。</p><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state: boolean = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">0x00ff</span>;</span><br><span class="line"><span class="keyword">let</span> num1: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> num2: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">&quot;qq&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> ins: <span class="built_in">string</span> = <span class="string">`<span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">10</span>, <span class="number">18</span>];</span><br><span class="line"><span class="keyword">let</span> arr1: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="string">&quot;1&quot;</span>, <span class="number">33</span>, <span class="string">&quot;www&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组泛型 Array&lt;元素类型&gt;</span></span><br><span class="line"><span class="keyword">let</span> staArr: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;qq&quot;</span>, <span class="string">&quot;ww&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> numArr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">let</span> Arr: <span class="built_in">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = [<span class="string">&quot;qq&quot;</span>, <span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//object数组</span></span><br><span class="line"><span class="keyword">const</span> objArr: &#123; name: <span class="built_in">string</span> &#125;[] = [&#123; name: <span class="string">&quot;qq&quot;</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//type alias：类型别名 eg:type value = number</span></span><br><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> personArr: Person[] = [&#123; name: <span class="string">&quot;qq&quot;</span>, age: <span class="number">18</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ManArr: Man[] = [<span class="keyword">new</span> Man(), &#123; name: <span class="string">&quot;qq&quot;</span>, age: <span class="number">18</span> &#125;];</span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组是数量个数有限的数组，它所定义类型需一一对应,常用于 excel 或者 csv 文件 例如人员信息表之类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameList: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>][] = [</span><br><span class="line">  [<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;pm&quot;</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="string">&quot;qqq&quot;</span>, <span class="string">&quot;tp&quot;</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="string">&quot;www&quot;</span>, <span class="string">&quot;pm&quot;</span>, <span class="number">20</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">number</span>, <span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="number">18</span>, <span class="string">&quot;qq&quot;</span>, <span class="number">17</span>];</span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Color &#123;</span><br><span class="line">  red,</span><br><span class="line">  green,</span><br><span class="line">  yellow,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.green;</span><br><span class="line"><span class="comment">//c : 0</span></span><br><span class="line"><span class="built_in">enum</span> status &#123;</span><br><span class="line">  fail = <span class="number">3</span>,</span><br><span class="line">  success,</span><br><span class="line">  processing,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = status.success;</span><br><span class="line"><span class="comment">//s : 4</span></span><br></pre></td></tr></table></figure><h2 id="any-可以表示任何值"><a href="#any-可以表示任何值" class="headerlink" title="any : 可以表示任何值"></a>any : 可以表示任何值</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> noSure: <span class="built_in">any</span> = <span class="string">&quot;qq&quot;</span>;</span><br><span class="line">noSure = <span class="number">18</span>;</span><br><span class="line">noSure = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="void-表示没有返回值-–-no-return"><a href="#void-表示没有返回值-–-no-return" class="headerlink" title="void : 表示没有返回值 – no return"></a>void : 表示没有返回值 – no return</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ad</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="never-永远不可能出现"><a href="#never-永远不可能出现" class="headerlink" title="never : 永远不可能出现"></a>never : 永远不可能出现</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">msg: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;永远执行不到我&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;永远执行不到我&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">w</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;永远执行不到我&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="symbol-es6-中的新类型-唯一"><a href="#symbol-es6-中的新类型-唯一" class="headerlink" title="symbol : es6 中的新类型 唯一"></a>symbol : es6 中的新类型 唯一</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sb = <span class="built_in">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类型注解和类型推论"><a href="#类型注解和类型推论" class="headerlink" title="类型注解和类型推论"></a>类型注解和类型推论</h2><p>类型注解（type annotation）：可以直接告诉 TS 变量是什么类型<br>类型推论（type inference）：TS 会取自动的尝试分析变量的类型<br>如果 TS 能够自动分析出变量的类型 就不需要进行类型注解<br>如果 TS 无法分析出变量的类型就需要类型注解</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入参需要类型注解，返回值则是类型推论得出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params">firstNum: <span class="built_in">number</span>, secondNum: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstNum + secondNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h1><p>TS 可以对函数的入参和返回值进行约束</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数返回值的约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params">firstNum: <span class="built_in">number</span>, secondNum: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstNum + secondNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值：void</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noReturn</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值：never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">msg: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数入参解构赋值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123; first, second &#125;: &#123; first: <span class="built_in">number</span>; second: <span class="built_in">number</span> &#125;</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;first,second&#125; : &#123;first: number, second: number&#125; 而不能写成 &#123;first: number, second: number&#125;</span></span><br><span class="line"><span class="comment">//&#123;first: number, second: number&#125;是es6中解构赋值的语法，意味着 let number = first, let number  = second</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数注解的另一种写法</span></span><br><span class="line"><span class="keyword">const</span> func: <span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> paresInt(str, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="五、-类型别名-和-接口-和-类"><a href="#五、-类型别名-和-接口-和-类" class="headerlink" title="五、 类型别名 和 接口 和 类"></a>五、 类型别名 和 接口 和 类</h1><h2 id="类型别名：type-alias"><a href="#类型别名：type-alias" class="headerlink" title="类型别名：type alias"></a>类型别名：type alias</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> Person1 = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="接口：interface"><a href="#接口：interface" class="headerlink" title="接口：interface"></a>接口：interface</h2><p><strong>在 TS 中，相比 type，优先使用 interface</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getPersonName = (person: &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setPersonName = (</span><br><span class="line">  person: &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;,</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  person.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以把&#123;name:string, age:number&#125;提出来</span></span><br><span class="line"><span class="comment">//?: 缺省</span></span><br><span class="line"><span class="comment">//readonly ：只读</span></span><br><span class="line"><span class="comment">//[propName]: any; 未知属性</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  [propName]: <span class="built_in">any</span>;</span><br><span class="line">  say(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码可写成：</span></span><br><span class="line"><span class="keyword">const</span> getPersonName = (person: Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setPersonName = (person: Person, name: <span class="built_in">string</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  person.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; name: <span class="string">&quot;qq&quot;</span> &#125;;</span><br><span class="line">getPersonName(person);</span><br><span class="line">setPersonName(person, <span class="string">&quot;ww&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接传字面量会进行强校验</span></span><br><span class="line">getPersonName(&#123; name: <span class="string">&quot;qq&quot;</span>, sex: <span class="string">&quot;female&quot;</span> &#125;); <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口可以继承自另一个接口</span></span><br><span class="line"><span class="keyword">interface</span> teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  teach(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口直接定义一个方法</span></span><br><span class="line"><span class="keyword">interface</span> SayHi &#123;</span><br><span class="line">  (word: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="定义类、类的属性和方法"><a href="#定义类、类的属性和方法" class="headerlink" title="定义类、类的属性和方法"></a>定义类、类的属性和方法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name = <span class="string">&quot;dell&quot;</span>;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类可以应用接口"><a href="#类可以应用接口" class="headerlink" title="类可以应用接口"></a>类可以应用接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类可以应用接口</span></span><br><span class="line"><span class="keyword">class</span> User <span class="keyword">implements</span> Person &#123;</span><br><span class="line">  name = <span class="string">&quot;dell&quot;</span>;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  getTeacherName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="built_in">console</span>.log(teacher.getName()); <span class="comment">//dell</span></span><br><span class="line"><span class="built_in">console</span>.log(teacher.getTeacherName()); <span class="comment">//teacher</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Teacher继承自Person,Teacher是子类，Person是父类</span></span><br><span class="line"><span class="comment">//子类可以重写父类的属性和方法：</span></span><br><span class="line"><span class="keyword">class</span> Teacher1 <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  getTeacherName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;lee&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher1 = <span class="keyword">new</span> Teacher1();</span><br><span class="line"><span class="built_in">console</span>.log(teacher1.getName()); <span class="comment">//lee</span></span><br><span class="line"><span class="built_in">console</span>.log(teacher1.getTeacherName()); <span class="comment">//teacher</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//super: 重写了父类方法之后，可以通过super再去调用父类的方法</span></span><br><span class="line"><span class="keyword">class</span> Teacher2 <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  getTeacherName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getName() + <span class="string">&quot; lee&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher2 = <span class="keyword">new</span> Teacher2();</span><br><span class="line"><span class="built_in">console</span>.log(teacher2.getName()); <span class="comment">//dell lee</span></span><br><span class="line"><span class="built_in">console</span>.log(teacher2.getTeacherName()); <span class="comment">//teacher</span></span><br></pre></td></tr></table></figure><h2 id="类的访问类型、构造器和"><a href="#类的访问类型、构造器和" class="headerlink" title="类的访问类型、构造器和"></a>类的访问类型、构造器和</h2><h3 id="类的访问类型"><a href="#类的访问类型" class="headerlink" title="类的访问类型"></a>类的访问类型</h3><p>类的访问类型有：public、private、protected<br>public 允许在类的内外被调用<br>private 允许在类内被调用<br>protected 允许在类内及继承的子类中使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> App &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> todo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> canDo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Game <span class="keyword">extends</span> App &#123;</span><br><span class="line">  <span class="keyword">public</span> getTodo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">this</span>.canDo(); <span class="comment">//error：私有方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> App();</span><br><span class="line"><span class="built_in">console</span>.log(app.name); <span class="comment">//error: 不可以在类及继承类之外使用</span></span><br></pre></td></tr></table></figure><h3 id="类的构造器-constructor"><a href="#类的构造器-constructor" class="headerlink" title="类的构造器 constructor"></a>类的构造器 constructor</h3><p><strong>new 一个实例的瞬间 constructor 就会被执行</strong><br><strong>只要子类要声明构造器，那么子类需要手动调用父类的构造器</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> P &#123;</span><br><span class="line">  <span class="comment">//传统写法</span></span><br><span class="line">  <span class="comment">// public name: string</span></span><br><span class="line">  <span class="comment">// constructor(name: string)&#123;</span></span><br><span class="line">  <span class="comment">//   this.name = name</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//简化写法</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> P(<span class="string">&quot;qq&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只要子类要声明构造器，那么子类需要手动调用父类的构造器 super()</span></span><br><span class="line"><span class="keyword">class</span> T <span class="keyword">extends</span> P &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;dell&quot;</span>); <span class="comment">//实际上指的是在调父类的构造函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> T(<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(t.age); <span class="comment">//18</span></span><br><span class="line"><span class="built_in">console</span>.log(t.name); <span class="comment">//dell</span></span><br></pre></td></tr></table></figure><h3 id="类的内置方法-getter-和-setter"><a href="#类的内置方法-getter-和-setter" class="headerlink" title="类的内置方法 getter 和 setter"></a>类的内置方法 getter 和 setter</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Book &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  get name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name + <span class="string">&quot;_own&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  set name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = name.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> book = <span class="keyword">new</span> Book(<span class="string">&quot;AWM&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(book.name); <span class="comment">//AWM_own</span></span><br><span class="line">book.name = <span class="string">&quot;WWW_own&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.name); <span class="comment">//WWW_own</span></span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>abstract 关键字来定义抽象类，抽象方法。<br>抽象方法要放在抽象类里，不包含具体实现，但在派生类中要实现抽象方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Geo</span></span>&#123;</span><br><span class="line">  getName()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;qq&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  abstract getArea: number</span><br><span class="line">  abstract eat(): any</span><br><span class="line">&#125;</span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">GeoLee</span> <span class="keyword">extends</span> <span class="title">Geo</span></span>&#123;</span><br><span class="line">  eat()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;eat&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态属性-static"><a href="#静态属性-static" class="headerlink" title="静态属性 static"></a>静态属性 static</h3><p>静态属性存在于这个类本身而不是类的实例上，访问静态属性时需要加上类名</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">typeof</span> = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line">  getType(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Animal.typeof);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Model &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> instance: Model;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;&#125; <span class="comment">//constructor设为私有属性可保证无法通过new来实例化</span></span><br><span class="line">  <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.instance) &#123;</span><br><span class="line">      <span class="built_in">this</span>.instance = <span class="keyword">new</span> Model(<span class="string">&quot;dell&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> model1 = Model.getInstance();</span><br><span class="line"><span class="keyword">const</span> model2 = <span class="keyword">new</span> Model(); <span class="comment">//error：类“Model”的构造函数是私有的，仅可在类声明中访问</span></span><br></pre></td></tr></table></figure><h1 id="六、配置文件-tsconfig-json"><a href="#六、配置文件-tsconfig-json" class="headerlink" title="六、配置文件 tsconfig.json"></a>六、配置文件 tsconfig.json</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令</span></span><br><span class="line">tsc demo.js <span class="comment">//直接编译指定的ts文件是不走tsconfig文件的</span></span><br><span class="line">tsc  <span class="comment">//会走tsconfig文件</span></span><br><span class="line"></span><br><span class="line">ts-node demo.js <span class="comment">//ts-node底层编译执行时是会走tsconfig文件的</span></span><br></pre></td></tr></table></figure><p><a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html">https://www.tslang.cn/docs/handbook/tsconfig-json.html</a></p><h1 id="七、typescript-高级"><a href="#七、typescript-高级" class="headerlink" title="七、typescript 高级"></a>七、typescript 高级</h1><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Bird &#123;</span><br><span class="line">  fly: <span class="built_in">Boolean</span>;</span><br><span class="line">  sing: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Dog &#123;</span><br><span class="line">  fly: <span class="built_in">Boolean</span>;</span><br><span class="line">  bark: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>): <span class="title">void</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><h3 id="as-类型断言来做类型保护"><a href="#as-类型断言来做类型保护" class="headerlink" title="as 类型断言来做类型保护"></a>as 类型断言来做类型保护</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (animal.fly) &#123;</span><br><span class="line">    <span class="comment">//类型断言： （我比机器更清楚我在做什么）</span></span><br><span class="line">    (animal <span class="keyword">as</span> Bird).sing();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    (animal <span class="keyword">as</span> Dog).bark();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="in-方法来做类型保护"><a href="#in-方法来做类型保护" class="headerlink" title="in 方法来做类型保护"></a>in 方法来做类型保护</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trainAnimal</span>(<span class="params">animal: Bird | Dog</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">//in：指定的属性在指定的**对象或者其原型链**上时返回true；</span></span><br><span class="line">  <span class="comment">//Object.keys(obj)：返回一个指定对象**自身**可枚举属性名组成的数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;sing&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    animal.sing();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    animal.bark();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="typeof-方法来做类型保护"><a href="#typeof-方法来做类型保护" class="headerlink" title="typeof 方法来做类型保护"></a>typeof 方法来做类型保护</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computedAdd</span>(<span class="params">first: <span class="built_in">number</span> | <span class="built_in">string</span>, second: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> first === <span class="string">&quot;string&quot;</span> || <span class="keyword">typeof</span> second === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="instanceof-方法来做类型保护"><a href="#instanceof-方法来做类型保护" class="headerlink" title="instanceof 方法来做类型保护"></a>instanceof 方法来做类型保护</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> NumberObj &#123;</span><br><span class="line">  count: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computedAdd1</span>(<span class="params">first: NumberObj | <span class="built_in">object</span>, second: NumberObj | <span class="built_in">object</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (first <span class="keyword">instanceof</span> NumberObj &amp;&amp; second <span class="keyword">instanceof</span> NumberObj) &#123;</span><br><span class="line">    <span class="keyword">return</span> first.count + second.count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="函数中的泛型"><a href="#函数中的泛型" class="headerlink" title="函数中的泛型"></a>函数中的泛型</h3><p>函数中的泛型是在函数被调用的时候才声明的，可以通过显式声明，也可以不声明，typescript 会进行类型推断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join</span>&lt;<span class="title">T</span>, <span class="title">P</span>&gt;(<span class="params">first: T, second: P, third: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">join(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>, <span class="number">2</span>);</span><br><span class="line">join &lt; number, string &gt; (<span class="number">2</span>, <span class="string">&quot;2&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">join1</span>&lt;<span class="title">T</span>&gt;(<span class="params">params: T[]</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> params[(<span class="built_in">Math</span>.random() * <span class="number">10</span>).toFixed(<span class="number">1</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">join1 &lt; number &gt; [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>];</span><br></pre></td></tr></table></figure><h3 id="类中的泛型-genetic"><a href="#类中的泛型-genetic" class="headerlink" title="类中的泛型 genetic"></a>类中的泛型 genetic</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface Item &#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manage</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(public data: T[])&#123;&#125;</span><br><span class="line">  getItem(index: number): string&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index].name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> manager = <span class="keyword">new</span> Manage([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;QQ&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="泛型中-keyof-的使用"><a href="#泛型中-keyof-的使用" class="headerlink" title="泛型中 keyof 的使用"></a>泛型中 keyof 的使用</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Who &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里keyof相当于循环给T赋值，值为字符串</span></span><br><span class="line"><span class="comment">// type T = &#x27;name&#x27;</span></span><br><span class="line"><span class="comment">// key: &#x27;name&#x27;</span></span><br><span class="line"><span class="comment">// Who[T]: string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type T = &#x27;age&#x27;</span></span><br><span class="line"><span class="comment">// key: &#x27;age&#x27;</span></span><br><span class="line"><span class="comment">// Who[T]: number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type T = &#x27;gender&#x27;</span></span><br><span class="line"><span class="comment">// key: &#x27;gender&#x27;</span></span><br><span class="line"><span class="comment">// Who[T]: string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> msg: Who</span>) &#123;&#125;</span><br><span class="line">  getInfo&lt;T <span class="keyword">extends</span> keyof Who&gt;(key: T): Who[T] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.msg[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> Student(&#123;</span><br><span class="line">  name: <span class="string">&quot;Q&quot;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> st = student.getInfo(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="命名空间-namespace"><a href="#命名空间-namespace" class="headerlink" title="命名空间 namespace"></a>命名空间 namespace</h2><p>命名空间能够只把部分需要暴露出来的接口放在全局中，其余都包裹在命名空间内</p><p>namespace xxx {}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//四个全局变量：Header Content Footer Page</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">const</span> header = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    header.innerHTML = <span class="string">&#x27;this is header&#x27;</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(header)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">const</span> content = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    content.innerHTML = <span class="string">&#x27;this is content&#x27;</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(content)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">const</span> footer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    footer.innerHTML = <span class="string">&#x27;this is footer&#x27;</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(footer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">new</span> Header()</span><br><span class="line">    <span class="keyword">new</span> Content()</span><br><span class="line">    <span class="keyword">new</span> Footer()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Page()</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义命名空间home，且只将Page暴露出去</span></span><br><span class="line">namespace Home &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">      <span class="keyword">const</span> header = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      header.innerHTML = <span class="string">&#x27;this is header&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(header)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">      <span class="keyword">const</span> content = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      content.innerHTML = <span class="string">&#x27;this is content&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(content)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">      <span class="keyword">const</span> footer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      footer.innerHTML = <span class="string">&#x27;this is footer&#x27;</span></span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(footer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">      <span class="keyword">new</span> Header()</span><br><span class="line">      <span class="keyword">new</span> Content()</span><br><span class="line">      <span class="keyword">new</span> Footer()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Home.Page()</span><br></pre></td></tr></table></figure><h3 id="命名空间分隔到不同的文件中"><a href="#命名空间分隔到不同的文件中" class="headerlink" title="命名空间分隔到不同的文件中"></a>命名空间分隔到不同的文件中</h3><p>需要将多个 ts 文件打包到一个 js 文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  outFile: <span class="string">&quot;./build/page.js&quot;</span>;</span><br><span class="line">  <span class="built_in">module</span>: <span class="string">&quot;amd&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//page.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//依赖声明</span></span><br><span class="line"><span class="comment">///&lt;reference path=&#x27;./components.ts&#x27; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Home &#123;</span><br><span class="line">  <span class="comment">//子命名空间</span></span><br><span class="line">  <span class="keyword">namespace</span> SubComponents &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Test &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Page &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">new</span> Components.Header();</span><br><span class="line">      <span class="keyword">new</span> Components.Content();</span><br><span class="line">      <span class="keyword">new</span> Components.Footer();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Home.Page();</span><br><span class="line"></span><br><span class="line"><span class="comment">//components.ts</span></span><br><span class="line"><span class="keyword">namespace</span> Components &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Header &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> header = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      header.innerHTML = <span class="string">&quot;this is header&quot;</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(header);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Content &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> content = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      content.innerHTML = <span class="string">&quot;this is content&quot;</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(content);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Footer &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> footer = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      footer.innerHTML = <span class="string">&quot;this is footer&quot;</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(footer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块化：import-引入文件"><a href="#模块化：import-引入文件" class="headerlink" title="模块化：import 引入文件"></a>模块化：import 引入文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//components.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    el.innerText = <span class="string">&quot;header&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    el.innerText = <span class="string">&quot;Content&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    el.innerText = <span class="string">&quot;Footer&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//page.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Header, Content, Footer &#125; <span class="keyword">from</span> <span class="string">&quot;./1-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">new</span> Header();</span><br><span class="line">    <span class="keyword">new</span> Content();</span><br><span class="line">    <span class="keyword">new</span> Footer();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Page();</span><br></pre></td></tr></table></figure><h2 id="parcel-打包"><a href="#parcel-打包" class="headerlink" title="parcel 打包"></a>parcel 打包</h2><p>parcel 是一个类似 webpack 的文件但不需要配置</p><p>安装 parcel</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g parcel-bundler</span><br></pre></td></tr></table></figure><p>使用 parcel</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parcel xxx.html</span><br></pre></td></tr></table></figure><h1 id="八、装饰器"><a href="#八、装饰器" class="headerlink" title="八、装饰器"></a>八、装饰器</h1><h2 id="装饰器是什么？"><a href="#装饰器是什么？" class="headerlink" title="装饰器是什么？"></a>装饰器是什么？</h2><p>装饰器本身是一个函数，通过 @ 符号来进行使用</p><p>装饰器的语法在 标准里是实验性的语法，需要在 tsconfig.json 里打开 experimental 的 decorator 属性，否则编辑器会报错</p><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>类的装饰器接收的参数是类的构造函数</p><p>装饰器运行时机是什么？<br>—在类创建好之后立即执行，是对类做修饰而不是对类的实例做修饰</p><p>装饰器执行顺序？<br>—从下到上的顺序执行，即就是先收集的装饰器后执行</p><ol><li>简单的装饰器 及 装饰器组合</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;decorator&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator1</span>(<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;decorator1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@testDecorator</span></span><br><span class="line"><span class="meta">@testDecorator1</span></span><br><span class="line"><span class="keyword">class</span> Test &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// decorator1</span></span><br><span class="line"><span class="comment">// decorator</span></span><br></pre></td></tr></table></figure><ol start="2"><li>工厂模式 1-装饰器</li></ol><p>问题：提示不完善</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params">flag: <span class="built_in">Boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">      constructor.prototype.getName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;lee&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">constructor: <span class="built_in">any</span></span>) </span>&#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@testDecorator</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">class</span> Test &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">(test <span class="keyword">as</span> <span class="built_in">any</span>).getName(); <span class="comment">//lee</span></span><br></pre></td></tr></table></figure><ol start="3"><li>工厂模式 2-装饰器</li></ol><p>解决 typescript 不知道类构造函数已经改变的问题</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDecorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">new</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt; <span class="title">any</span>&gt;(<span class="params">constructor: T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> <span class="keyword">constructor</span> &#123;</span><br><span class="line">      name = <span class="string">&quot;lee&quot;</span>;</span><br><span class="line">      getName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test = testDecorator()(</span><br><span class="line">  <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test(<span class="string">&quot;QQ&quot;</span>);</span><br><span class="line">test.getName();</span><br></pre></td></tr></table></figure><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p>定义好这个类之后 方法装饰器就会执行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法装饰器的入参</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通方法 target 对应的是类的 property</span></span><br><span class="line"><span class="comment">// 静态方法 target 对应的是类的 构造函数 constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// descriptor 等同于 object.defineProperty方法的descriptor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNameDecorator</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  descriptor.configurable = <span class="literal">true</span>;</span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;rewrite-QQ&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(target, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNameDecorator1</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@getNameDecorator</span></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@getNameDecorator1</span></span><br><span class="line">  <span class="keyword">static</span> getName1() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test(<span class="string">&quot;QQ&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Test &#123; getName: [Function] &#125; &#x27;getName&#x27;</span></span><br><span class="line"><span class="comment">// &#123; [Function: Test] getName1: [Function] &#125; &#x27;getName1&#x27;</span></span><br><span class="line"><span class="comment">// rewrite-QQ</span></span><br></pre></td></tr></table></figure><h2 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给类里面的访问器增加装饰器</span></span><br><span class="line"><span class="comment">//target对应的是类的property</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visitDecorator</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  descriptor: PropertyDescriptor</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  descriptor.writable = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> _name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  get name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@visitDecorator</span></span><br><span class="line">  set name(name) &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test(<span class="string">&quot;QQQQQ&quot;</span>);</span><br><span class="line">test.name = <span class="string">&quot;rewrite-QQ&quot;</span>; <span class="comment">//报错 descriptor的可写属性被设置为false，尝试写入会报错</span></span><br></pre></td></tr></table></figure><p>注意：TypeScript 不允许同时装饰一个成员的 get 和 set 访问器<br>这是因为在装饰器应用于属性描述符时，它联合了 get 和 set 访问器，而不是分开声明的。</p><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性装饰器,参数只有两个target key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何扩展一个descriptor：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameDecorator</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> descriptor: PropertyDescriptor = &#123;</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="meta">@nameDecorator</span></span><br><span class="line">  name = <span class="string">&quot;QQ&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">test.name = <span class="string">&quot;rewrite-QQ&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test.name);</span><br></pre></td></tr></table></figure><p>属性装饰器没法直接改变属性的值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是原型上的name</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameDecorator</span>(<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  target[key] = <span class="string">&quot;rewrite-QQ&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是实例上的name</span></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="meta">@nameDecorator</span></span><br><span class="line">  name = <span class="string">&quot;QQ&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="built_in">console</span>.log(test.name); <span class="comment">// QQ</span></span><br><span class="line"><span class="built_in">console</span>.log((test <span class="keyword">as</span> <span class="built_in">any</span>).__proto__.name); <span class="comment">// rewrite-QQ</span></span><br></pre></td></tr></table></figure><h2 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数装饰器</span></span><br><span class="line"><span class="comment">//三个参数：第一个是property 第二个是对应的函数名 第三个是参数索引</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paramDecorator</span>(<span class="params">target: <span class="built_in">any</span>, method: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target, method, paramIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  getInfo(<span class="meta">@paramDecorator</span> name: <span class="built_in">string</span>, age: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">test.getInfo(<span class="string">&quot;QQ&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Test &#123; getInfo: [Function] &#125; &#x27;getInfo&#x27; 0</span></span><br><span class="line"><span class="comment">// QQ 30</span></span><br></pre></td></tr></table></figure><h2 id="装饰器使用"><a href="#装饰器使用" class="headerlink" title="装饰器使用"></a>装饰器使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰器的小例子：捕获异常的共通代码</span></span><br><span class="line"><span class="keyword">let</span> userInfo: <span class="built_in">any</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catchErrorDecorator</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, key: <span class="built_in">string</span>, descriptor: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fn = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        fn();</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">type</span>&#125;</span>存在问题`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Test &#123;</span><br><span class="line">  <span class="meta">@catchErrorDecorator</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> userInfo.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@catchErrorDecorator</span>(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    <span class="keyword">return</span> userInfo.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">test.getName();</span><br><span class="line">test.getAge();</span><br></pre></td></tr></table></figure><h2 id="装饰器求值"><a href="#装饰器求值" class="headerlink" title="装饰器求值"></a>装饰器求值</h2><blockquote><p>类中不同类型的装饰器将按以下规定的顺序执行<br>参数装饰器–方法装饰器–访问器装饰器–属性装饰器应用到每个实例成员<br>参数装饰器–方法装饰器–访问器装饰器–属性装饰器应用到每个静态成员<br>参数装饰器应用到构造函数<br>类装饰器应用到类上</p></blockquote><h2 id="reflect-metadata-元数据"><a href="#reflect-metadata-元数据" class="headerlink" title="reflect-metadata 元数据"></a>reflect-metadata 元数据</h2><p>可在设计阶段为参数注入元数据<br>使用需下载 reflect-metadata 包，并且在 tsconfig 中将 emitDecoratorMetadata 设置为 true<br>（实验性的属性）</p><h1 id="九、如何编写一个类型定义文件-xxx-d-ts-js-–-gt-ts"><a href="#九、如何编写一个类型定义文件-xxx-d-ts-js-–-gt-ts" class="headerlink" title="九、如何编写一个类型定义文件(xxx.d.ts): js –&gt; ts"></a>九、如何编写一个类型定义文件(xxx.d.ts): js –&gt; ts</h1><h2 id="定义全局变量-全局函数-对对象-类进行类型定义"><a href="#定义全局变量-全局函数-对对象-类进行类型定义" class="headerlink" title="定义全局变量 全局函数 对对象/类进行类型定义"></a>定义全局变量 全局函数 对对象/类进行类型定义</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><br><span class="line">&lt;script src=<span class="string">&quot;http://xxx/jquery.min.js&quot;</span>&gt;&lt;/script&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//page.ts</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;html&quot;</span>).html(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">  <span class="keyword">new</span> $.fn.init();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jquery.d.ts</span></span><br><span class="line"><span class="comment">//定义全局函数</span></span><br><span class="line"><span class="keyword">interface</span> JQueryInstance &#123;</span><br><span class="line">  html: <span class="function">(<span class="params">html: <span class="built_in">string</span></span>) =&gt;</span> JQueryInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">readyFunc: () =&gt; <span class="built_in">void</span></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector: <span class="built_in">string</span></span>): <span class="title">JQueryInstance</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局对象，对类进行类型定义，命名空间的嵌套</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> $ &#123;</span><br><span class="line">  <span class="keyword">namespace</span> fn &#123;</span><br><span class="line">    <span class="keyword">class</span> init &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="es6-模块化"><a href="#es6-模块化" class="headerlink" title="es6 模块化"></a>es6 模块化</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//项目npm i jquery</span></span><br><span class="line"><span class="comment">//page.ts</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;html&quot;</span>).html(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">  <span class="keyword">new</span> $.fn.init();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6模块化: declare module &#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> &quot;jquery&quot; &#123;</span><br><span class="line">  <span class="keyword">interface</span> JQueryInstance &#123;</span><br><span class="line">    html: <span class="function">(<span class="params">html: <span class="built_in">string</span></span>) =&gt;</span> JQueryInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//$：混合类型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">readyFunc: () =&gt; <span class="built_in">void</span></span>): <span class="title">void</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector: <span class="built_in">string</span></span>): <span class="title">JQueryInstance</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">namespace</span> $ &#123;</span><br><span class="line">    <span class="keyword">namespace</span> fn &#123;</span><br><span class="line">      <span class="keyword">class</span> init &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> = $;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相等操作符中的隐式转换</title>
      <link href="2020/10/27/%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2020/10/27/%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>看到公众号推文 ![ ]==[ ] 值是什么，原以为取反的式子肯定是 false，但这个比较的确让我心头一惊 Σ(っ °Д °;)っ<br>那今天就具体看看隐式转换是怎么进行的吧</p></blockquote><h1 id="一、可能会被忽略的细节"><a href="#一、可能会被忽略的细节" class="headerlink" title="一、可能会被忽略的细节"></a>一、可能会被忽略的细节</h1><p>同类型的比较就不用说了，一般会被大家忽略的都是不同类型比较的时候所出现的类型隐式转换的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="string">&quot;1&quot;</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span>; <span class="comment">//true</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>ii<br>上面的都比较好理解，但是，回归题目，可以使<code>a==a &amp;&amp; a==!a</code>这个表达式为 true 的 a 是什么呢？</p><p>来看一个让人惊讶的比较式子吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [];</span><br><span class="line">a == !a; <span class="comment">//true</span></span><br><span class="line">a == a; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>好了，关于题目的答案已经找到了，但为什么会是这个样子呢，就需要细究比较操作符中的隐式转换了</p><h1 id="二、比较运算涉及类型转换时的规则"><a href="#二、比较运算涉及类型转换时的规则" class="headerlink" title="二、比较运算涉及类型转换时的规则"></a>二、比较运算涉及类型转换时的规则</h1><p>对于如何进行比较，MDN 上是这么说的：</p><h2 id="类型转换规则"><a href="#类型转换规则" class="headerlink" title="类型转换规则"></a>类型转换规则</h2><p><img src="https://img-blog.csdnimg.cn/20201023163205983.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>当比较运算涉及类型转换时，JavaScript 会按以下规则对字符串、数字、布尔或者对象类型的操作数进行操作:</p><ol><li>当比较数字和字符串时，字符串会转换成数字值。JavaScript 尝试将数字字面量转换为数字类型的值。</li><li>当其中有一个操作数为布尔值时，如果布尔值为 true，为转换为 1，如果为 false 会转换为 0</li><li>如果一个对象与数字或者字符串比较，JavaScript 会尝试返回对象的默认值，操作符会尝试通过方法<strong>valueOf</strong>和<strong>toString</strong>将对象转换为其原始值（一个字符串或者数字类型的值）。如果尝试转换失败，会产生一个错误。<br><strong>注意:</strong> 当且仅当与原始值进行比较时，对象会被转换为原始值。当两个操作数均为对象时，他们会作为对象进行比较，仅当他们的引用相同对象时返回 true。</li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/20201026114528372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dvb2RfbW9yaW5nXw==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>先来解释一下这个式子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] == ![]; <span class="comment">//true</span></span><br><span class="line"><span class="comment">//这里 ![] 作为布尔值false会转换成 0，</span></span><br><span class="line"><span class="comment">// [] 也将转换成数值字面量为 0</span></span><br><span class="line"><span class="comment">// 上面式子就相当于 Number([]) == Number(Boolean(![]))</span></span><br></pre></td></tr></table></figure><h2 id="对象转换成原始类型时-valueOf-与-toString-的优先级"><a href="#对象转换成原始类型时-valueOf-与-toString-的优先级" class="headerlink" title="对象转换成原始类型时 valueOf 与 toString 的优先级"></a>对象转换成原始类型时 valueOf 与 toString 的优先级</h2><p>上述类型转换规则 3 有提到，当对象与字符串或者数字进行比较时，JavaScript 会尝试返回对象默认值，调用其 valueOf 和 toString 将对象转换为其原始值，那到底调用哪个呢，让我们来一探究竟：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">    valueOf: <span class="function">() =&gt;</span> <span class="number">1</span>,</span><br><span class="line">    toString: <span class="function">() =&gt;</span> <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  c = &#123;</span><br><span class="line">    valueOf: <span class="function">() =&gt;</span> <span class="literal">null</span>,</span><br><span class="line">    toString: <span class="function">() =&gt;</span> <span class="string">&quot;null&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  d = &#123;</span><br><span class="line">    valueOf: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">    toString: <span class="function">() =&gt;</span> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  e = &#123;</span><br><span class="line">    valueOf: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">    toString: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b == <span class="number">1</span>, b == <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c == <span class="literal">null</span>, c == <span class="string">&quot;null&quot;</span>, c == <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d == <span class="literal">undefined</span>, d == <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(e == <span class="literal">undefined</span>, e == <span class="literal">null</span>, e == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true false</span></span><br><span class="line"><span class="comment">// false false true</span></span><br><span class="line"><span class="comment">// false true</span></span><br><span class="line"><span class="comment">// Uncaught TypeError: Cannot convert object to primitive value</span></span><br></pre></td></tr></table></figure><p>实践出真知，由上面例子我们可以看出：</p><blockquote><p>1.valueOf 的优先级高于 toString<br>2.valueOf 和 toString 返回 null 和 undefined 时返回 false<br>3.valueOf 和 toString 返回的不是原始值时会报错</p></blockquote><h1 id="三、ES6-中的-Symbol-toPrimitive（优先级最高）"><a href="#三、ES6-中的-Symbol-toPrimitive（优先级最高）" class="headerlink" title="三、ES6 中的 Symbol.toPrimitive（优先级最高）"></a>三、ES6 中的 Symbol.toPrimitive（优先级最高）</h1><p>ES6 中的 symbol.toPrimitive 这个转换函数优先级高于 valueOf 和 toString;<br><strong>symbol.toPrimitive</strong>是一个内置的 symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为一个对应的原始值时会调用此函数。<br>该函数被调用的时候，会传递一个参数 hint,表示预期的原始型，这个参数取值可为：number、string、default 中的一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive]: <span class="function">(<span class="params">hint</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">&quot;number&quot;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(obj) == <span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(obj) == <span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj == <span class="number">3</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="四、扩展-1：如何让-a-1-amp-amp-a-2-amp-a-3成立"><a href="#四、扩展-1：如何让-a-1-amp-amp-a-2-amp-a-3成立" class="headerlink" title="四、扩展 1：如何让 a==1&amp;&amp;a==2&amp;a==3成立"></a>四、扩展 1：如何让 <code>a==1&amp;&amp;a==2&amp;a==3</code>成立</h1><p>了解了上述方法之后，那就可以重写对象的 valueOf 或者 toString 方法来实现了，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  value: <span class="number">0</span>,</span><br><span class="line">  valueOf: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ++a.value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="五、扩展-2：如何让-a-1-amp-amp-a-2-amp-a-3成立"><a href="#五、扩展-2：如何让-a-1-amp-amp-a-2-amp-a-3成立" class="headerlink" title="五、扩展 2：如何让 a===1&amp;&amp;a===2&amp;a===3成立"></a>五、扩展 2：如何让 <code>a===1&amp;&amp;a===2&amp;a===3</code>成立</h1><h2 id="劫持"><a href="#劫持" class="headerlink" title="劫持"></a>劫持</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  value: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    <span class="keyword">return</span> ++obj.value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">obj.a === <span class="number">1</span> &amp;&amp; obj.a === <span class="number">2</span> &amp;&amp; obj.a === <span class="number">3</span>;</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="ES6-proxy-代理"><a href="#ES6-proxy-代理" class="headerlink" title="ES6 proxy 代理"></a>ES6 proxy 代理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    get(target, key, receiver) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">this</span>.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">obj.a === <span class="number">1</span> &amp;&amp; obj.a === <span class="number">2</span> &amp;&amp; obj.a === <span class="number">3</span>;</span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + butterfly + github 搭建个人博客</title>
      <link href="2020/09/02/hexo+github+butterfly%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/09/02/hexo+github+butterfly%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).## Quick Start### Create a new post<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a> –&gt;</p><blockquote><p>hexo + github + butterfly 搭建个人博客</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
